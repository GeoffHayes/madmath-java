/*
 * 2013-09-26   Geoff Hayes     Initial Release.
 */

/**
 * Package to manage math-centric structures (i.e. matrices) and algorithms.
 */
package com.madmath.math;

import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

/**
 * Class to validate the Matrix library.
 */
public class MatrixValidation 
{
    /**
     * Helper class to manage test statistics.
     */
    public class TestStats
    {
        public TestStats()
        {
            numTests=0;
            numTestsPassed=0;
        }
        int numTests;
        int numTestsPassed;
    };
       
    //! Path to data files to be used for validation of the matrix class.
    private static final String DATA_PATH  = 
            "/Users/geoff/Development/java/matrix/data/";
    
    //!  Epsilon bound uses to determine if two numbers are close enough to one another.
    private static final double EPSILON = 0.0000000001;    
    
    /** 
     * Note that this value is decent for the matrices generated, but will be
     * insufficient if the values within the matrix become larger especially on
     * the order of 1000 times larger than what is generated by the MATLAB test 
     * data.  This indicates that there is a difference between the way in which 
     * MATLAB and the Matrix library calculates the determinant.
     */
    private static final double DET_EPSILON = 0.001;
    
    /**
     * Function to test for matrix assignment.
     *
     * @param   stats  The statistics gathered from running the test.
     */
    public static void MatrixAssignmentTest(TestStats stats)
    {       
        int numBytes = 0;
        
        // initialize the input parameters
        stats.numTests       = 0;
        stats.numTestsPassed = 0;
        
        // get the path and file name
        String pathAndFile = new String(DATA_PATH);
        pathAndFile += "double/mtxAssignmentTest.bin";
        numBytes = 8;

        DataInputStream din = null;
        
        try
        {
            // open the data input stream
             din = new DataInputStream(new FileInputStream(pathAndFile));
            
            // read data from file
            while(true)
            {
                // read the matrix dimensions
                short numRows = 0;
                short numCols = 0;
                
                numRows = din.readShort();
                numCols = din.readShort();

                // assume if either the row or column is zero, then there is no more
                // data to read from file
                if (numRows==0 || numCols==0)
                {
                    break;
                }
                
                // increment the test counter
                stats.numTests++;
                
                // create the matrix
                Matrix A = new Matrix(numRows,numCols);
                
                // read the data into a buffer
                int numBytesToRead = numRows*numCols*numBytes;
                byte data[] = new byte[numBytesToRead];
                din.read(data);

                // copy the buffer into the matrix
                A.copy(numRows,numCols,data);
                
                // validate
                boolean diffFound = false;
                
                Matrix B = new Matrix();
                B.copy(A);
                
                for (int i=1; i<=numRows; ++i)
                {
                    for (int j=1; j<=numCols; ++j)
                    {
                        if(A.at(i,j) != B.at(i,j))
                        {
                            diffFound = true;
                            break;
                        }
                    }

                    if (diffFound)
                    {
                        break;
                    }
                }

                if (!diffFound)
                {
                    stats.numTestsPassed++;
                }          
            }
        }
        catch(final FileNotFoundException e)
        {
            System.out.println("Could not open file " + pathAndFile);
        }
        catch(final EOFException e)
        {
            // deliberately left blank
        }
        catch(final Exception e)
        {
            System.out.println("MatrixAssignmentTest exception raised: " + e.toString());
        }
        
        if (din != null)
        {
            try 
            {
                din.close();
            } 
            catch (IOException e) 
            {
                // deliberately left blank
            }
        }
    }

    /**
     * Function to test for matrix copy constructor.
     *
     * @param   stats   The statistics gathered from running the tests.
     */
    public static void MatrixCopyConstructorTest(TestStats stats)
    {
        int numBytes = 0;
        
        // initialize the input parameters
        stats.numTests       = 0;
        stats.numTestsPassed = 0;
        
        // get the path and file name
        String pathAndFile = new String(DATA_PATH);
        pathAndFile += "double/mtxAssignmentTest.bin";
        numBytes = 8;

        DataInputStream din = null;
        
        try
        {
            // open the data input stream
             din = new DataInputStream(new FileInputStream(pathAndFile));
            
            // read data from file
            while(true)
            {
                // read the matrix dimensions
                short numRows = 0;
                short numCols = 0;
                
                numRows = din.readShort();
                numCols = din.readShort();

                // assume if either the row or column is zero, then there is no more
                // data to read from file
                if (numRows==0 || numCols==0)
                {
                    break;
                }
                
                // increment the test counter
                stats.numTests++;
                
                // create the matrix
                Matrix A = new Matrix(numRows,numCols);
                
                // read the data into a buffer
                int numBytesToRead = numRows*numCols*numBytes;
                byte data[] = new byte[numBytesToRead];
                din.read(data);

                // copy the buffer into the matrix
                A.copy(numRows,numCols,data);
                
                // validate
                boolean diffFound = false;
                
                Matrix B = new Matrix(A);

                
                for (int i=1; i<=numRows; ++i)
                {
                    for (int j=1; j<=numCols; ++j)
                    {
                        if(A.at(i,j) != B.at(i,j))
                        {
                            diffFound = true;
                            break;
                        }
                    }

                    if (diffFound)
                    {
                        break;
                    }
                }

                if (!diffFound)
                {
                    stats.numTestsPassed++;
                }          
            }
        }
        catch(final FileNotFoundException e)
        {
            System.out.println("Could not open file " + pathAndFile);
        }
        catch(final EOFException e)
        {
            // deliberately left blank
        }
        catch(final Exception e)
        {
            System.out.println("MatrixCopyConstructorTest exception raised: " + e.toString());
        }
        
        if (din != null)
        {
            try 
            {
                din.close();
            } 
            catch (IOException e) 
            {
                // deliberately left blank
            }
        }        
    }

    /**
     * Function to test for matrix scalar assignment.
     *
     * @param   stats   The statistics gathered from running the tests..
     */
    public static void MatrixScalarAssignmentTest(TestStats stats)
    {
        // initialize the input parameters
        stats.numTests       = 0;
        stats.numTestsPassed = 0;
        
        // get the path and file name
        String pathAndFile = new String(DATA_PATH);
        pathAndFile += "double/mtxScalarAssignmentTest.bin";

        DataInputStream din = null;
        
        try
        {
            // open the data input stream
             din = new DataInputStream(new FileInputStream(pathAndFile));
            
            // read data from file
            while(true)
            {
                // read the matrix dimensions
                short numRows = 0;
                short numCols = 0;
                
                numRows = din.readShort();
                numCols = din.readShort();

                // assume if either the row or column is zero, then there is no more
                // data to read from file
                if (numRows==0 || numCols==0)
                {
                    break;
                }
                
                // increment the test counter
                stats.numTests++;
                
                // create the matrix
                Matrix A = new Matrix(numRows,numCols);
                
                // read the scalar into a buffer
                final double scalar = din.readDouble();

                // assign the scalar to the matrix
                A.assign(scalar);
                
                // validate
                boolean diffFound = false;

                for (int i=1; i<=numRows; ++i)
                {
                    for (int j=1; j<=numCols; ++j)
                    {
                        if(A.at(i,j) != scalar)
                        {
                            diffFound = true;
                            break;
                        }
                    }

                    if (diffFound)
                    {
                        break;
                    }
                }

                if (!diffFound)
                {
                    stats.numTestsPassed++;
                }          
            }
        }
        catch(final FileNotFoundException e)
        {
            System.out.println("Could not open file " + pathAndFile);
        }
        catch(final EOFException e)
        {
            // deliberately left blank
        }
        catch(final Exception e)
        {
            System.out.println("MatrixScalarAssignmentTest exception raised: " + e.toString());
        }
        
        if (din != null)
        {
            try 
            {
                din.close();
            } 
            catch (IOException e) 
            {
                // deliberately left blank
            }
        }   
    }

    /**
     * Function to test for matrix scalar addition.
     *
     * @param   stats   The statistics gathered from running the tests.
     */
    public static void MatrixScalarAdditionTest(TestStats stats)
    {
        int numBytes = 0;
        
        // initialize the input parameters
        stats.numTests       = 0;
        stats.numTestsPassed = 0;
        
        // get the path and file name
        String pathAndFile = new String(DATA_PATH);
        pathAndFile += "double/mtxScalarAdditionTest.bin";
        numBytes = 8;

        DataInputStream din = null;
        
        try
        {
            // open the data input stream
             din = new DataInputStream(new FileInputStream(pathAndFile));
            
            // read data from file
            while(true)
            {
                // read the matrix dimensions
                short numRows = 0;
                short numCols = 0;
                
                numRows = din.readShort();
                numCols = din.readShort();

                // assume if either the row or column is zero, then there is no more
                // data to read from file
                if (numRows==0 || numCols==0)
                {
                    break;
                }
                
                // increment the test counter
                stats.numTests++;
                
                // create the matrix
                Matrix A = new Matrix(numRows,numCols);
                Matrix B = new Matrix(numRows,numCols);
                
                // read the scalar data
                final double scalar = din.readDouble();
                
                // read the matrix A data into a buffer and copy
                // into A
                int numBytesToRead = numRows*numCols*numBytes;
                byte data[] = new byte[numBytesToRead];
                din.read(data);
                A.copy(numRows,numCols,data);
                
                // read the matrix B data into a buffer and copy
                // into B
                din.read(data);
                B.copy(numRows,numCols,data);
                
                // add the scalar to A
                A.add(scalar);
                
                // validate
                boolean diffFound = false;
                
                
                for (int i=1; i<=numRows; ++i)
                {
                    for (int j=1; j<=numCols; ++j)
                    {
                        if(A.at(i,j) != B.at(i,j))
                        {
                            diffFound = true;
                            break;
                        }
                    }

                    if (diffFound)
                    {
                        break;
                    }
                }

                if (!diffFound)
                {
                    stats.numTestsPassed++;
                }          
            }
        }
        catch(final FileNotFoundException e)
        {
            System.out.println("Could not open file " + pathAndFile);
        }
        catch(final EOFException e)
        {
            // deliberately left blank
        }
        catch(final Exception e)
        {
            System.out.println("MatrixScalarAdditionTest exception raised: " + e.toString());
        }
        
        if (din != null)
        {
            try 
            {
                din.close();
            } 
            catch (IOException e) 
            {
                // deliberately left blank
            }
        }         
    }

    /**
     * Function to test for matrix scalar subtraction.
     *
     * @param   stats   The statistics gathered from running the tests.
     */
    public static void MatrixScalarSubtractionTest(TestStats stats)
    {
        int numBytes = 0;
        
        // initialize the input parameters
        stats.numTests       = 0;
        stats.numTestsPassed = 0;
        
        // get the path and file name
        String pathAndFile = new String(DATA_PATH);
        pathAndFile += "double/mtxScalarSubtractionTest.bin";
        numBytes = 8;

        DataInputStream din = null;
        
        try
        {
            // open the data input stream
             din = new DataInputStream(new FileInputStream(pathAndFile));
            
            // read data from file
            while(true)
            {
                // read the matrix dimensions
                short numRows = 0;
                short numCols = 0;
                
                numRows = din.readShort();
                numCols = din.readShort();

                // assume if either the row or column is zero, then there is no more
                // data to read from file
                if (numRows==0 || numCols==0)
                {
                    break;
                }
                
                // increment the test counter
                stats.numTests++;
                
                // create the matrix
                Matrix A = new Matrix(numRows,numCols);
                Matrix B = new Matrix(numRows,numCols);
                
                // read the scalar data
                final double scalar = din.readDouble();
                
                // read the matrix A data into a buffer and copy
                // into A
                int numBytesToRead = numRows*numCols*numBytes;
                byte data[] = new byte[numBytesToRead];
                din.read(data);
                A.copy(numRows,numCols,data);
                
                // read the matrix B data into a buffer and copy
                // into B
                din.read(data);
                B.copy(numRows,numCols,data);
                
                // subtract the scalar from A
                A.sub(scalar);
                
                // validate
                boolean diffFound = false;
                
                
                for (int i=1; i<=numRows; ++i)
                {
                    for (int j=1; j<=numCols; ++j)
                    {
                        if(A.at(i,j) != B.at(i,j))
                        {
                            diffFound = true;
                            break;
                        }
                    }

                    if (diffFound)
                    {
                        break;
                    }
                }

                if (!diffFound)
                {
                    stats.numTestsPassed++;
                }          
            }
        }
        catch(final FileNotFoundException e)
        {
            System.out.println("Could not open file " + pathAndFile);
        }
        catch(final EOFException e)
        {
            // deliberately left blank
        }
        catch(final Exception e)
        {
            System.out.println("MatrixScalarSubtractionTest exception raised: " + e.toString());
        }
        
        if (din != null)
        {
            try 
            {
                din.close();
            } 
            catch (IOException e) 
            {
                // deliberately left blank
            }
        }  
    }

    /**
     * Function to test for matrix scalar multiplication.
     *
     * @param   stats   The statistics gathered from running the tests.
     */
    public static void MatrixScalarMultiplicationTest(TestStats stats)
    {
        int numBytes = 0;
        
        // initialize the input parameters
        stats.numTests       = 0;
        stats.numTestsPassed = 0;
        
        // get the path and file name
        String pathAndFile = new String(DATA_PATH);
        pathAndFile += "double/mtxScalarMultiplicationTest.bin";
        numBytes = 8;

        DataInputStream din = null;
        
        try
        {
            // open the data input stream
             din = new DataInputStream(new FileInputStream(pathAndFile));
            
            // read data from file
            while(true)
            {
                // read the matrix dimensions
                short numRows = 0;
                short numCols = 0;
                
                numRows = din.readShort();
                numCols = din.readShort();

                // assume if either the row or column is zero, then there is no more
                // data to read from file
                if (numRows==0 || numCols==0)
                {
                    break;
                }
                
                // increment the test counter
                stats.numTests++;
                
                // create the matrix
                Matrix A = new Matrix(numRows,numCols);
                Matrix B = new Matrix(numRows,numCols);
                
                // read the scalar data
                final double scalar = din.readDouble();
                
                // read the matrix A data into a buffer and copy
                // into A
                int numBytesToRead = numRows*numCols*numBytes;
                byte data[] = new byte[numBytesToRead];
                din.read(data);
                A.copy(numRows,numCols,data);
                
                // read the matrix B data into a buffer and copy
                // into B
                din.read(data);
                B.copy(numRows,numCols,data);
                
                // multiply the scalar against A
                A.mult(scalar);
                
                // validate
                boolean diffFound = false;
                
                
                for (int i=1; i<=numRows; ++i)
                {
                    for (int j=1; j<=numCols; ++j)
                    {
                        if(A.at(i,j) != B.at(i,j))
                        {
                            diffFound = true;
                            break;
                        }
                    }

                    if (diffFound)
                    {
                        break;
                    }
                }

                if (!diffFound)
                {
                    stats.numTestsPassed++;
                }          
            }
        }
        catch(final FileNotFoundException e)
        {
            System.out.println("Could not open file " + pathAndFile);
        }
        catch(final EOFException e)
        {
            // deliberately left blank
        }
        catch(final Exception e)
        {
            System.out.println("MatrixScalarMultiplicationTest exception raised: " + e.toString());
        }
        
        if (din != null)
        {
            try 
            {
                din.close();
            } 
            catch (IOException e) 
            {
                // deliberately left blank
            }
        }  
    }

    /**
     * Function to test for matrix addition.
     *
     * @param   stats   The statistics gathered from running the tests.
     */
    public static void MatrixAdditionTest(TestStats stats)
    {
        int numBytes = 0;
        
        // initialize the input parameters
        stats.numTests       = 0;
        stats.numTestsPassed = 0;
        
        // get the path and file name
        String pathAndFile = new String(DATA_PATH);
        pathAndFile += "double/mtxAdditionTest.bin";
        numBytes = 8;

        DataInputStream din = null;
        
        try
        {
            // open the data input stream
             din = new DataInputStream(new FileInputStream(pathAndFile));
            
            // read data from file
            while(true)
            {
                // read the matrix dimensions
                short numRows = 0;
                short numCols = 0;
                
                numRows = din.readShort();
                numCols = din.readShort();

                // assume if either the row or column is zero, then there is no more
                // data to read from file
                if (numRows==0 || numCols==0)
                {
                    break;
                }
                
                // increment the test counter
                stats.numTests++;
                
                // create the matrix
                Matrix A = new Matrix(numRows,numCols);
                Matrix B = new Matrix(numRows,numCols);
                Matrix C = new Matrix(numRows,numCols);
                
                // read the matrix A data into a buffer and copy
                // into A
                int numBytesToRead = numRows*numCols*numBytes;
                byte data[] = new byte[numBytesToRead];
                din.read(data);
                A.copy(numRows,numCols,data);
                
                // read the matrix B data into a buffer and copy
                // into B
                din.read(data);
                B.copy(numRows,numCols,data);
                
                // read the matrix C data into a buffer and copy
                // into C
                din.read(data);
                C.copy(numRows,numCols,data);
                
                // A = A + B
                A.add(B);
                
                // validate
                boolean diffFound = false;
                
                
                for (int i=1; i<=numRows; ++i)
                {
                    for (int j=1; j<=numCols; ++j)
                    {
                        if(A.at(i,j) != C.at(i,j))
                        {
                            diffFound = true;
                            break;
                        }
                    }

                    if (diffFound)
                    {
                        break;
                    }
                }

                if (!diffFound)
                {
                    stats.numTestsPassed++;
                }          
            }
        }
        catch(final FileNotFoundException e)
        {
            System.out.println("Could not open file " + pathAndFile);
        }
        catch(final EOFException e)
        {
            // deliberately left blank
        }
        catch(final Exception e)
        {
            System.out.println("MatrixAdditionTest exception raised: " + e.toString());
        }
        
        if (din != null)
        {
            try 
            {
                din.close();
            } 
            catch (IOException e) 
            {
                // deliberately left blank
            }
        }  
    }


    /**
     * Function to test for matrix subtraction.
     *
     * @param   stats   The statistics gathered from running the tests.
     */
    public static void MatrixSubtractionTest(TestStats stats)
    {
        int numBytes = 0;
        
        // initialize the input parameters
        stats.numTests       = 0;
        stats.numTestsPassed = 0;
        
        // get the path and file name
        String pathAndFile = new String(DATA_PATH);
        pathAndFile += "double/mtxSubtractionTest.bin";
        numBytes = 8;

        DataInputStream din = null;
        
        try
        {
            // open the data input stream
             din = new DataInputStream(new FileInputStream(pathAndFile));
            
            // read data from file
            while(true)
            {
                // read the matrix dimensions
                short numRows = 0;
                short numCols = 0;
                
                numRows = din.readShort();
                numCols = din.readShort();

                // assume if either the row or column is zero, then there is no more
                // data to read from file
                if (numRows==0 || numCols==0)
                {
                    break;
                }
                
                // increment the test counter
                stats.numTests++;
                
                // create the matrix
                Matrix A = new Matrix(numRows,numCols);
                Matrix B = new Matrix(numRows,numCols);
                Matrix C = new Matrix(numRows,numCols);
                
                // read the matrix A data into a buffer and copy
                // into A
                int numBytesToRead = numRows*numCols*numBytes;
                byte data[] = new byte[numBytesToRead];
                din.read(data);
                A.copy(numRows,numCols,data);
                
                // read the matrix B data into a buffer and copy
                // into B
                din.read(data);
                B.copy(numRows,numCols,data);
                
                // read the matrix C data into a buffer and copy
                // into C
                din.read(data);
                C.copy(numRows,numCols,data);
                
                // A = A - B
                A.sub(B);
                
                // validate
                boolean diffFound = false;
                
                
                for (int i=1; i<=numRows; ++i)
                {
                    for (int j=1; j<=numCols; ++j)
                    {
                        if(A.at(i,j) != C.at(i,j))
                        {
                            diffFound = true;
                            break;
                        }
                    }

                    if (diffFound)
                    {
                        break;
                    }
                }

                if (!diffFound)
                {
                    stats.numTestsPassed++;
                }          
            }
        }
        catch(final FileNotFoundException e)
        {
            System.out.println("Could not open file " + pathAndFile);
        }
        catch(final EOFException e)
        {
            // deliberately left blank
        }
        catch(final Exception e)
        {
            System.out.println("MatrixSubtractionTest exception raised: " + e.toString());
        }
        
        if (din != null)
        {
            try 
            {
                din.close();
            } 
            catch (IOException e) 
            {
                // deliberately left blank
            }
        }  
    }

    /**
     * Function to test for matrix multiplication.
     *
     * @param   stats   The statistics gathered from running the tests.
     */
    public static void MatrixMultiplicationTest(TestStats stats)
    {
        int numBytes = 0;
        
        // initialize the input parameters
        stats.numTests       = 0;
        stats.numTestsPassed = 0;
        
        // get the path and file name
        String pathAndFile = new String(DATA_PATH);
        pathAndFile += "double/mtxMultiplicationTest.bin";
        numBytes = 8;

        DataInputStream din = null;
        
        try
        {
            // open the data input stream
             din = new DataInputStream(new FileInputStream(pathAndFile));
            
            // read data from file
            while(true)
            {
                // read the matrix dimensions
                short numRowsA = 0;
                short numColsA = 0;
                short numRowsB = 0;
                short numColsB = 0;
                
                numRowsA = din.readShort();
                numColsA = din.readShort();
                numRowsB = din.readShort();
                numColsB = din.readShort();

                // assume if either the row or column is zero, then there is no more
                // data to read from file
                if (numRowsA==0 || numColsA==0 || numRowsB==0 || numColsB==0)
                {
                    break;
                }
                
                // increment the test counter
                stats.numTests++;
                
                // create the matrix
                Matrix A = new Matrix(numRowsA,numColsA);
                Matrix B = new Matrix(numRowsB,numColsB);
                Matrix C = new Matrix(numRowsA,numColsB);
                
                // read the matrix A data into a buffer and copy
                // into A
                int numBytesToRead = numRowsA*numColsA*numBytes;
                byte data[] = new byte[numBytesToRead];
                din.read(data);
                A.copy(numRowsA,numColsA,data);
                
                // read the matrix B data into a buffer and copy
                // into B
                numBytesToRead = numRowsB*numColsB*numBytes;
                data = new byte[numBytesToRead];
                din.read(data);
                B.copy(numRowsB,numColsB,data);
                
                // read the matrix C data into a buffer and copy
                // into C
                numBytesToRead = numRowsA*numColsB*numBytes;
                data = new byte[numBytesToRead];
                din.read(data);
                C.copy(numRowsA,numColsB,data);

                // A = A * B
                A.mult(B);
                
                // validate
                boolean diffFound = false;
                
                
                for (int i=1; i<=numRowsA; ++i)
                {
                    for (int j=1; j<=numColsB; ++j)
                    {
                        if(java.lang.Math.abs(A.at(i,j) - C.at(i,j)) > EPSILON)
                        {
                            diffFound = true;
                            break;
                        }
                    }

                    if (diffFound)
                    {
                        break;
                    }
                }

                if (!diffFound)
                {
                    stats.numTestsPassed++;
                }          
            }
        }
        catch(final FileNotFoundException e)
        {
            System.out.println("Could not open file " + pathAndFile);
        }
        catch(final EOFException e)
        {
            // deliberately left blank
        }
        catch(final Exception e)
        {
            System.out.println("MatrixMultiplicationTest exception raised: " + e.toString());
        }
        
        if (din != null)
        {
            try 
            {
                din.close();
            } 
            catch (IOException e) 
            {
                // deliberately left blank
            }
        }  
    }


    /**
     * Function to test for matrix transpose templatized on the input
     * (from file) type.
     *
     * @param   stats   The statistics gathered from running the tests.
     */
    public static void MatrixTransposeTest(TestStats stats)
    {
        int numBytes = 0;
        
        // initialize the input parameters
        stats.numTests       = 0;
        stats.numTestsPassed = 0;
        
        // get the path and file name
        String pathAndFile = new String(DATA_PATH);
        pathAndFile += "double/mtxTransposeTest.bin";
        numBytes = 8;

        DataInputStream din = null;
        
        try
        {
            // open the data input stream
             din = new DataInputStream(new FileInputStream(pathAndFile));
            
            // read data from file
            while(true)
            {
                // read the matrix dimensions
                short numRowsA = 0;
                short numColsA = 0;
                
                numRowsA = din.readShort();
                numColsA = din.readShort();

                // assume if either the row or column is zero, then there is no more
                // data to read from file
                if (numRowsA==0 || numColsA==0)
                {
                    break;
                }
                
                // increment the test counter
                stats.numTests++;
                
                // create the matrix
                Matrix A = new Matrix(numRowsA,numColsA);
                Matrix B = new Matrix(numColsA,numRowsA);
                
                // read the matrix A data into a buffer and copy
                // into A
                int numBytesToRead = numRowsA*numColsA*numBytes;
                byte data[] = new byte[numBytesToRead];
                din.read(data);
                A.copy(numRowsA,numColsA,data);
                
                // read the matrix B data into a buffer and copy
                // into B
                din.read(data);
                B.copy(numColsA,numRowsA,data);

                // A = A^t
                A.t();

                // validate
                boolean diffFound = false;

                for (int i=1; i<=A.getRows(); ++i)
                {
                    for (int j=1; j<=A.getCols(); ++j)
                    {
                        if(A.at(i,j) != B.at(i,j))
                        {
                            diffFound = true;
                            System.out.println("B! error at (" + i + "," + j + ")" );
                            System.out.println(B.toString());
                            break;
                        }
                    }

                    if (diffFound)
                    {
                        break;
                    }
                }

                if (!diffFound)
                {
                    stats.numTestsPassed++;
                }          
            }
        }
        catch(final FileNotFoundException e)
        {
            System.out.println("Could not open file " + pathAndFile);
        }
        catch(final EOFException e)
        {
            // deliberately left blank
        }
        catch(final Exception e)
        {
            System.out.println("MatrixTransposeTest exception raised: " + e.toString());
        }
        
        if (din != null)
        {
            try 
            {
                din.close();
            } 
            catch (IOException e) 
            {
                // deliberately left blank
            }
        }  
    }

    /**
     * Function to test for matrix determinant.
     *
     * @param   stats   The statistics gathered from running the tests.
     */
    public static void MatrixDeterminantTest(TestStats stats)
    {
        int numBytes = 0;
        
        // initialize the input parameters
        stats.numTests       = 0;
        stats.numTestsPassed = 0;
        
        // get the path and file name
        String pathAndFile = new String(DATA_PATH);
        pathAndFile += "double/mtxDeterminantTest.bin";
        numBytes = 8;

        DataInputStream din = null;
        
        try
        {
            // open the data input stream
             din = new DataInputStream(new FileInputStream(pathAndFile));
            
            // read data from file
            while(true)
            {
                // read the matrix dimensions
                short numRowsA = 0;
                short numColsA = 0;
                
                numRowsA = din.readShort();
                numColsA = din.readShort();

                // assume if either the row or column is zero, then there is no more
                // data to read from file
                if (numRowsA==0 || numColsA==0)
                {
                    break;
                }
                
                // increment the test counter
                stats.numTests++;
                
                // create the matrix
                Matrix A = new Matrix(numRowsA,numColsA);
                
                // read the matrix A data into a buffer and copy
                // into A
                int numBytesToRead = numRowsA*numColsA*numBytes;
                byte data[] = new byte[numBytesToRead];
                din.read(data);
                A.copy(numRowsA,numColsA,data);
                
                // read the determinant
                final double determTruth = din.readDouble();

                // det(A)
                final double determA = A.det();

                // validate
                if (java.lang.Math.abs(determA-determTruth)<DET_EPSILON)
                {
                    stats.numTestsPassed++;
                }
                else
                {
                    // consider the difference as a fraction of the true determinant
                    // and the calculated determinant - if both are less than epsilon,
                    // then assume a pass
                    final double diff = java.lang.Math.abs(determA-determTruth);
                    final double percentTruth = diff/determTruth*100.0;
                    final double percentA     = diff/determA*100.0;
                    if (percentA < EPSILON && percentTruth < EPSILON)
                    {
                        stats.numTestsPassed++;
                    }
                }
            }
        }
        catch(final FileNotFoundException e)
        {
            System.out.println("Could not open file " + pathAndFile);
        }
        catch(final EOFException e)
        {
            // deliberately left blank
        }
        catch(final Exception e)
        {
            System.out.println("MatrixDeterminantTest exception raised: " + e.toString());
        }
        
        if (din != null)
        {
            try 
            {
                din.close();
            } 
            catch (IOException e) 
            {
                // deliberately left blank
            }
        }  
    }  

    /**
     * Function to test for matrix inverse.
     *
     * @param   stats   The statistics gathered from running the tests.
     */
    public static void MatrixInverseTest(TestStats stats)
    {
        int numBytes = 0;
        
        // initialize the input parameters
        stats.numTests       = 0;
        stats.numTestsPassed = 0;
        
        // get the path and file name
        String pathAndFile = new String(DATA_PATH);
        pathAndFile += "double/mtxInverseTest.bin";
        numBytes = 8;

        DataInputStream din = null;
        
        try
        {
            // open the data input stream
             din = new DataInputStream(new FileInputStream(pathAndFile));
            
            // read data from file
            while(true)
            {
                // read the matrix dimensions
                short numRows = 0;
                short numCols = 0;
                
                numRows = din.readShort();
                numCols = din.readShort();

                // assume if either the row or column is zero, then there is no more
                // data to read from file
                if (numRows==0 || numCols==0)
                {
                    break;
                }
                
                // increment the test counter
                stats.numTests++;
                
                // create the matrix
                Matrix A = new Matrix(numRows,numCols);
                Matrix B = new Matrix(numRows,numCols);
                
                // read the data for each matrix into the buffer and
                // copy to the appropriate matrix
                int numBytesToRead = numRows*numCols*numBytes;
                byte data[] = new byte[numBytesToRead];
                
                din.read(data);
                A.copy(numRows,numCols,data);
                
                din.read(data);
                B.copy(numRows,numCols,data);
                
                // inv(A)
                Matrix C = new Matrix(A);
                C.i();

                // validate
                boolean diffFound = false;
                
                for (int i=1; i<=numRows; ++i)
                {
                    for (int j=1; j<=numCols; ++j)
                    {
                        // use the factor of 10 to get one test to pass
                        if(java.lang.Math.abs(C.at(i,j) - B.at(i,j)) > EPSILON*10)
                        {
                            break;
                        }
                    }

                    if (diffFound)
                    {
                        break;
                    }
                }

                if (!diffFound)
                {
                    stats.numTestsPassed++;
                }  
            }
        }
        catch(final FileNotFoundException e)
        {
            System.out.println("Could not open file " + pathAndFile);
        }
        catch(final EOFException e)
        {
            // deliberately left blank
        }
        catch(final Exception e)
        {
            System.out.println("MatrixInverseTest exception raised: " + e.toString());
        }
        
        if (din != null)
        {
            try 
            {
                din.close();
            } 
            catch (IOException e) 
            {
                // deliberately left blank
            }
        }  
    } 
    
    /**
     * Function to test for matrix LUP.
     *
     * @param   stats   The statistics gathered from running the tests.
     */
    public static void MatrixLUPTest(TestStats stats)
    {
        int numBytes = 0;
        
        // initialize the input parameters
        stats.numTests       = 0;
        stats.numTestsPassed = 0;
        
        // get the path and file name
        String pathAndFile = new String(DATA_PATH);
        pathAndFile += "double/mtxLUPTest.bin";
        numBytes = 8;

        DataInputStream din = null;
        
        try
        {
            // open the data input stream
             din = new DataInputStream(new FileInputStream(pathAndFile));
            
            // read data from file
            while(true)
            {
                // read the matrix dimensions
                short numRows = 0;
                short numCols = 0;
                
                numRows = din.readShort();
                numCols = din.readShort();
                
                // assume if either the row or column is zero, then there is no more
                // data to read from file
                if (numRows==0 || numCols==0)
                {
                    break;
                }
                
                // increment the test counter
                stats.numTests++;
                
                // create the matrix
                Matrix A = new Matrix(numRows,numCols);
                Matrix L = new Matrix(numRows,numCols);
                Matrix U = new Matrix(numRows,numCols);
                Matrix P = new Matrix(numRows,numCols);
                
                // read in the data for each of the A, L, U, and P matrices
                int numBytesToRead = numRows*numCols*numBytes;
                byte data[] = new byte[numBytesToRead];
                din.read(data);
                A.copy(numRows,numCols,data);
                
                din.read(data);
                L.copy(numRows,numCols,data);
                
                din.read(data);
                U.copy(numRows,numCols,data);
                
                din.read(data);
                P.copy(numRows,numCols,data);

                // declare the calculated L, U and P matrices
                Matrix cL = new Matrix(numRows,numCols);
                Matrix cU = new Matrix(numRows,numCols);
                Matrix cP = new Matrix(numRows,numCols);
                
                // compute the LUP
                A.getLUPFactorization(cL, cU, cP);
                
                // validate
                boolean diffFound = false;
                
                for (int i=1; i<=numRows; ++i)
                {
                    for (int j=1; j<=numCols; ++j)
                    {
                        if(java.lang.Math.abs(cL.at(i,j) - L.at(i,j)) > EPSILON)
                        {
                            diffFound = true;
                            break;
                        }
                        if(java.lang.Math.abs(cU.at(i,j) - U.at(i,j)) > EPSILON)
                        {
                            diffFound = true;
                            break;
                        }
                        if(java.lang.Math.abs(cP.at(i,j) - P.at(i,j)) > EPSILON)
                        {
                            diffFound = true;
                            break;
                        }
                    }

                    if (diffFound)
                    {
                        break;
                    }
                }

                if (!diffFound)
                {
                    stats.numTestsPassed++;
                }          
            }
        }
        catch(final FileNotFoundException e)
        {
            System.out.println("Could not open file " + pathAndFile);
        }
        catch(final EOFException e)
        {
            // deliberately left blank
        }
        catch(final Exception e)
        {
            System.out.println("MatrixLUPTest exception raised: " + e.toString());
        }
        
        if (din != null)
        {
            try 
            {
                din.close();
            } 
            catch (IOException e) 
            {
                // deliberately left blank
            }
        }  
    }


    /**
     * @param args
     */
    public static void main(String[] args)
    {
        MatrixValidation mv = new MatrixValidation();
        
        TestStats stats = mv.new TestStats();
        
        MatrixValidation.MatrixAssignmentTest(stats);
        System.out.println("Testing Matrix Assignment Operator.........." + 
                stats.numTestsPassed  + "/" + stats.numTests);
        
        MatrixValidation.MatrixCopyConstructorTest(stats);
        System.out.println("Testing Matrix Copy Constructor Operator...." + 
                stats.numTestsPassed  + "/" + stats.numTests);
        
        MatrixValidation.MatrixScalarAssignmentTest(stats);
        System.out.println("Testing Matrix Scalar Assignment............" + 
                stats.numTestsPassed  + "/" + stats.numTests);

        MatrixValidation.MatrixScalarAdditionTest(stats);
        System.out.println("Testing Matrix Scalar Addition.............." + 
                stats.numTestsPassed  + "/" + stats.numTests);

        MatrixValidation.MatrixScalarSubtractionTest(stats);
        System.out.println("Testing Matrix Scalar Subtraction..........." + 
                stats.numTestsPassed  + "/" + stats.numTests);
        
        MatrixValidation.MatrixScalarMultiplicationTest(stats);
        System.out.println("Testing Matrix Scalar Multiplication........" + 
                stats.numTestsPassed  + "/" + stats.numTests);
        
        MatrixValidation.MatrixAdditionTest(stats);
        System.out.println("Testing Matrix Addition....................." + 
                stats.numTestsPassed  + "/" + stats.numTests);
        
        MatrixValidation.MatrixSubtractionTest(stats);
        System.out.println("Testing Matrix Subtraction.................." + 
                stats.numTestsPassed  + "/" + stats.numTests);
        
        MatrixValidation.MatrixMultiplicationTest(stats);
        System.out.println("Testing Matrix Multiplication..............." + 
                stats.numTestsPassed  + "/" + stats.numTests);
        
        MatrixValidation.MatrixTransposeTest(stats);
        System.out.println("Testing Matrix Transpose...................." + 
                stats.numTestsPassed  + "/" + stats.numTests);
        
        MatrixValidation.MatrixDeterminantTest(stats);
        System.out.println("Testing Matrix Determinant.................." + 
                stats.numTestsPassed  + "/" + stats.numTests);
        
        MatrixValidation.MatrixLUPTest(stats);
        System.out.println("Testing Matrix LUP.........................." + 
                stats.numTestsPassed  + "/" + stats.numTests);
        
        MatrixValidation.MatrixInverseTest(stats);
        System.out.println("Testing Matrix Inverse......................" + 
                stats.numTestsPassed  + "/" + stats.numTests);
    }

}
